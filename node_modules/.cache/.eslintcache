[{"/home/krsna/Desktop/bitmosys/src/index.js":"1","/home/krsna/Desktop/bitmosys/src/reportWebVitals.js":"2","/home/krsna/Desktop/bitmosys/src/App.js":"3","/home/krsna/Desktop/bitmosys/src/pages/crypto-page/CryptoPage.js":"4","/home/krsna/Desktop/bitmosys/src/pages/home-page/HomePage.js":"5","/home/krsna/Desktop/bitmosys/src/data.js":"6","/home/krsna/Desktop/bitmosys/src/myComponents/navbar/Navbar.js":"7","/home/krsna/Desktop/bitmosys/src/myComponents/crypto-block/CryptoBlock.js":"8","/home/krsna/Desktop/bitmosys/src/myComponents/dialog-box/DialogBox.js":"9"},{"size":500,"mtime":1643362066000,"results":"10","hashOfConfig":"11"},{"size":362,"mtime":1636913152000,"results":"12","hashOfConfig":"11"},{"size":452,"mtime":1643362550000,"results":"13","hashOfConfig":"11"},{"size":1797,"mtime":1643500643000,"results":"14","hashOfConfig":"11"},{"size":6454,"mtime":1643720806233,"results":"15","hashOfConfig":"11"},{"size":1243,"mtime":1643318319000,"results":"16","hashOfConfig":"11"},{"size":1856,"mtime":1643308317000,"results":"17","hashOfConfig":"11"},{"size":2148,"mtime":1643593032000,"results":"18","hashOfConfig":"11"},{"size":4106,"mtime":1643748275212,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"xjbn3p",{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},"/home/krsna/Desktop/bitmosys/src/index.js",[],"/home/krsna/Desktop/bitmosys/src/reportWebVitals.js",[],"/home/krsna/Desktop/bitmosys/src/App.js",[],"/home/krsna/Desktop/bitmosys/src/pages/crypto-page/CryptoPage.js",[],"/home/krsna/Desktop/bitmosys/src/pages/home-page/HomePage.js",["41"],"import { Button, CardMedia, Container, Typography } from \"@mui/material\";\nimport { Box } from \"@mui/system\";\nimport { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router\";\nimport cryptoData from \"../../data\";\nimport DialogBox from \"../../myComponents/dialog-box/DialogBox\";\nimport NavBar from \"../../myComponents/navbar/Navbar\";\nimport \"./style.css\"\n\nexport default function HomePage() {\n  const navigate = useNavigate();\n\n  const getDataFromLS = () => {\n    const data = JSON.parse(localStorage.getItem('data'));\n    return data || [];\n  }\n\n  const [data, setData] = useState(getDataFromLS());\n  const [open, setOpen] = useState(false);\n  let total = data?.reduce((sum, item) => sum + Number(item.value), 0);\n  const [id, setId] = useState('');\n  const [name, setName] = useState('');\n  const [value, setValue] = useState('');\n  const [indexNumber, setIndexNumber] = useState(\"\");\n  const [exchangeImage, setExchangeImage] = useState(\"\")\n  const [exchangeName, setExchangeName] = useState(\"\")\n  const [exchangeIndex, setExchangeIndex] = useState(\"\")\n  const showExchangeIndex = exchangeIndex + 2;\n  const showExchangeName = exchangeName;\n  const showExchangeImage = exchangeImage;\n  const exchangeValue = value - indexNumber;\n  const showExchangeValue = Math.abs(exchangeValue);\n  const cryptoName = name;\n  const cryptoId = id;\n  const cryptoValue = value;\n  const cryptoImage = cryptoData[id]?.image;\n\n  const getDropdownData = (name, value) => {\n    setName(name);\n    setId(value);\n  }\n\n  const getInputData = (value) => {\n    setValue(value)\n  }\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const removeDataIfZero = () => {\n    let newShowArray = data.filter(function (showArray) {\n      return showArray.value != \"0\";\n    });\n    localStorage.setItem('data', JSON.stringify(newShowArray));\n    window.location.reload();\n  }\n\n  const handleRemove = (id) => {\n    data.splice(id, 1)\n    localStorage.setItem('data', JSON.stringify(data))\n    navigate(\"/\")\n  }\n\n  const showExchangedData = {\n    \"id\": cryptoId,\n    \"name\": showExchangeName,\n    \"value\": showExchangeValue,\n    \"image\": showExchangeImage\n  }\n\n  const handleShowManageExchange = () => {\n    let newShowData = data;\n    newShowData.unshift(showExchangedData)\n    localStorage.setItem('data', JSON.stringify(newShowData))\n    navigate(\"/\")\n  }\n\n  const removePreviousData = () => {\n    data.splice(showExchangeIndex, 1)\n    localStorage.setItem('data', JSON.stringify(data))\n    navigate(\"/\")\n  }\n\n  const getExchangedData = {\n    \"name\": cryptoName,\n    \"value\": cryptoValue,\n    \"image\": cryptoImage\n  }\n\n  const handleSubmit = () => {\n    let newData = data;\n    newData.unshift(getExchangedData)\n    localStorage.setItem('data', JSON.stringify(newData))\n    navigate(\"/\")\n  }\n\n  const handleManageExchange = (indexNumber, exchangeImage, exchangeName, index) => {\n    setIndexNumber(indexNumber);\n    setExchangeImage(exchangeImage);\n    setExchangeName(exchangeName);\n    setExchangeIndex(index);\n  }\n\n  useEffect(() => {\n    setData(JSON.parse(localStorage.getItem('data')));\n  }, [])\n\n  return (\n    <Container>\n      <NavBar />\n      <Box className=\"header\" sx={{ padding: \"45px 60px\", mb: \"10px\", borderRadius: \"15px\" }}>\n        <Box>\n          <Typography variant='small'>Number Of Crypto Coins Types</Typography> <br />\n          <Typography variant='small'>{data?.length || 0}</Typography>\n        </Box>\n\n        <Box>\n          <Typography variant='small'>Number Of Crypto Coins</Typography> <br />\n          <Typography variant='small'>\n            {total || 0}\n          </Typography> <br />\n        </Box>\n      </Box>\n      <Box>\n        {\n          data?.length ?\n            <Box>\n              {\n                data?.map((item, index) => (\n                  <Box key={index} className=\"content\" sx={{ padding: \"15px\", mb: \"10px\" }}>\n                    <Box sx={{ display: \"flex\", justifyContent: \"space-between\", padding: \"15px\" }}>\n                      <Box sx={{ display: \"flex\", width: \"50px\" }}>\n                        <CardMedia\n                          sx={{ pr: \"10px\" }}\n                          component=\"img\"\n                          height=\"30\"\n                          width=\"30\"\n                          image={item.image}\n                          alt={item.name}\n                        />\n                        <Typography sx={{ pt: \"5px\" }} key={index} variant=\"small\">{item.name} </Typography>\n                      </Box>\n                      <Box sx={{ pt: \"5px\" }}>\n                        <Typography key={index} variant=\"small\">\n                          {item.value}\n                        </Typography>\n                      </Box>\n                      <Box>\n                        <Button onClick={() => {\n                          handleClickOpen();\n                          handleManageExchange(item.value, item.image, item.name, index);\n                        }} key={index} sx={{ mr: \"10px\", BackgroundColor: \"red\" }} variant=\"contained\" >exchange</Button>\n                        <Button\n                          onClick={() => handleRemove(index)}\n                          variant=\"contained\"\n                        >\n                          Remove\n                        </Button>\n                      </Box>\n                    </Box>\n                  </Box>\n                ))\n              }\n            </Box>\n            :\n            <Box className=\"content\" sx={{ padding: \"15px\", mb: \"10px\" }}>\n              <Box sx={{ display: \"flex\", justifyContent: \"space-between\", padding: \"15px\" }}>\n                <Typography variant=\"small\">Opps! No Crypto Coins found ):</Typography>\n                <Button variant=\"contained\" onClick={() => navigate('/crypto-page')}>Buy Crypto</Button>\n              </Box>\n            </Box>\n        }\n      </Box>\n      <Box>\n        <DialogBox\n          indexValue={indexNumber}\n          exchangeName={exchangeName}\n          handleClickOpen={handleClickOpen}\n          handleClose={handleClose}\n          handleSubmit={handleSubmit}\n          getDropdownData={getDropdownData}\n          getInputData={getInputData}\n          handleShowManageExchange={handleShowManageExchange}\n          removePreviousData={removePreviousData}\n          removeDataIfZero={removeDataIfZero}\n          value={name}\n          open={open}\n        />\n      </Box>\n    </Container>\n  )\n}","/home/krsna/Desktop/bitmosys/src/data.js",[],"/home/krsna/Desktop/bitmosys/src/myComponents/navbar/Navbar.js",[],"/home/krsna/Desktop/bitmosys/src/myComponents/crypto-block/CryptoBlock.js",["42","43"],"import { Button, Dialog, DialogContent, DialogTitle, TextField, Typography, CardMedia, DialogActions } from \"@mui/material\";\nimport { Box } from \"@mui/system\";\nimport { useState } from \"react\";\nimport \"./style.css\"\n\nexport default function CryptoBlock(props) {\n  const [open, setOpen] = useState(false);\n  const [value, setValue] = useState();\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handelChange = (e) => {\n    props.value(e.target.value, props.item.name, props.item.image, props.item.id);\n    setValue(e.target.value);\n  };\n\n  return (\n    <>\n      <Box className=\"content\" sx={{ display: 'flex', justifyContent: 'space-between', alignItems:\"center\", mb: \"10px\", padding: \"15px\" }}>\n        <Box sx={{ display: \"flex\" }}>\n          <CardMedia\n          sx={{pr:\"10px\"}}\n            component=\"img\"\n            height=\"30\"\n            width=\"30\"\n            image={props.item.image}\n            alt={props.item.name}\n          />\n          <Typography sx={{pt: \"5px\"}}>{props.item.name}</Typography>\n        </Box>\n        <Button variant=\"contained\" onClick={handleClickOpen} >Buy</Button>\n\n\n        <Dialog open={open} onClose={handleClose}>\n         <Box sx={{backgroundColor: \"rgb(15, 73, 63)\", p:1}}>\n         <DialogTitle color= \"white\">{props.item.name}</DialogTitle>\n          <DialogContent>\n            <TextField\n              autoFocus\n              margin=\"dense\"\n              id=\"name\"\n              label=\"Amount\"\n              type=\"number\"\n              fullWidth\n              variant=\"standard\"\n              onChange={handelChange}\n            />\n            {(value < 0) && <Typography color=\"error\">quantity must be positive</Typography>}\n          </DialogContent>\n          <DialogActions>\n            <Button variant=\"contained\" onClick={handleClose}>Cancel</Button>\n            <Button variant=\"contained\" onClick={() => {\n              {value > 0 && handleClose();}\n              {value > 0 && props.handleClose();}\n            }}>Buy</Button>\n          </DialogActions>\n         </Box>\n        </Dialog>\n\n\n      </Box>\n    </>\n  )\n};\n","/home/krsna/Desktop/bitmosys/src/myComponents/dialog-box/DialogBox.js",["44","45","46","47","48"],"import * as React from 'react';\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport { Box } from '@mui/system';\nimport { FormControl, InputLabel, MenuItem, Select, Typography } from '@mui/material';\n\nexport default function DialogBox(props) {\n  const [value, setValue] = React.useState();\n  const [dropValue, setDropValue] = React.useState();\n  const [dropName, setDropName] = React.useState();\n  const dValue = dropValue;\n  const dName = dropName;\n  const tValue = value;\n\n  const handleExchangeChange = (event, name) => {\n    props.getDropdownData(name.props.children, event.target.value);\n    setDropValue(event.target.value)\n    setDropName(name.props.children)\n  }\n  const handleTextChange = (event) => {\n    props.getInputData(event.target.value);\n    setValue(event.target.value);\n  }\n\n  return (\n    <div>\n      <Dialog open={props.open} onClose={props.handleClose}>\n        <Box sx={{ backgroundColor: \"rgb(15, 73, 63)\", p: 1 }}>\n          <DialogTitle color=\"white\">Exchange  \"{props.exchangeName}\" With </DialogTitle>\n          <DialogContent sx={{ color: 'white' }}>\n            <FormControl fullWidth>\n              <InputLabel id=\"demo-simple-select-label\" >Choose Crypto</InputLabel>\n              <Select\n                required={true}\n                labelId=\"demo-simple-select-label\"\n                id=\"demo-simple-select\"\n                label=\"Crypto\"\n                value={dValue}\n                onChange={handleExchangeChange}\n              >\n                <MenuItem value={0}>Bitcoin</MenuItem>\n                <MenuItem value={1}>Ethereum</MenuItem>\n                <MenuItem value={2}>Binance</MenuItem>\n                <MenuItem value={3}>Tether</MenuItem>\n                <MenuItem value={4}>Usdcoin</MenuItem>\n                <MenuItem value={5}>Cardano</MenuItem>\n                <MenuItem value={6}>Xrp</MenuItem>\n                <MenuItem value={7}>Cardano</MenuItem>\n                <MenuItem value={8}>Terraluna</MenuItem>\n                <MenuItem value={9}>Polkadot</MenuItem>\n              </Select>\n              {dName === props.exchangeName && <Typography color=\"error\">Crypto must be diffrent</Typography>}\n              {dName !== props.exchangeName && (!dValue && <Typography sx={{ mt: 1 }} color=\"error\">Please select crypto</Typography>)}\n            </FormControl>\n            <TextField\n              autoFocus\n              margin=\"dense\"\n              id=\"name\"\n              label=\"Crypto Quantity\"\n              type=\"number\"\n              fullWidth\n              variant=\"standard\"\n              onChange={handleTextChange}\n            />\n            {+props.indexValue < +tValue && <Typography sx={{ mt: 1 }} color=\"error\">Must be smaller than {props.indexValue} coins.</Typography>}\n            {(tValue < 0) && <Typography color=\"error\">quantity must be positive</Typography>}\n          </DialogContent>\n          <DialogActions>\n            <Button variant=\"contained\" onClick={props.handleClose}>Cancel</Button>\n            <Button variant=\"contained\" onClick={() => {\n              { (tValue && dValue && tValue > 0 && tValue <= props.indexValue && dName !== props.exchangeName) && props.handleSubmit(); }\n              { (tValue && dValue && tValue > 0 && tValue <= props.indexValue && dName !== props.exchangeName) && props.handleClose(); }\n              { (tValue && dValue && tValue > 0 && tValue <= props.indexValue && dName !== props.exchangeName) && props.handleShowManageExchange(); }\n              { (tValue && dValue && tValue > 0 && tValue <= props.indexValue && dName !== props.exchangeName) && props.removePreviousData(); }\n              { (tValue && dValue && tValue > 0 && tValue <= props.indexValue && dName !== props.exchangeName) && props.removeDataIfZero(); }\n            }}>Submit</Button>\n          </DialogActions>\n        </Box>\n      </Dialog>\n    </div>\n  );\n}",{"ruleId":"49","severity":1,"message":"50","line":57,"column":30,"nodeType":"51","messageId":"52","endLine":57,"endColumn":32},{"ruleId":"53","severity":1,"message":"54","line":59,"column":15,"nodeType":"55","messageId":"56","endLine":59,"endColumn":44},{"ruleId":"53","severity":1,"message":"54","line":60,"column":15,"nodeType":"55","messageId":"56","endLine":60,"endColumn":50},{"ruleId":"53","severity":1,"message":"54","line":75,"column":15,"nodeType":"55","messageId":"56","endLine":75,"endColumn":138},{"ruleId":"53","severity":1,"message":"54","line":76,"column":15,"nodeType":"55","messageId":"56","endLine":76,"endColumn":137},{"ruleId":"53","severity":1,"message":"54","line":77,"column":15,"nodeType":"55","messageId":"56","endLine":77,"endColumn":150},{"ruleId":"53","severity":1,"message":"54","line":78,"column":15,"nodeType":"55","messageId":"56","endLine":78,"endColumn":144},{"ruleId":"53","severity":1,"message":"54","line":79,"column":15,"nodeType":"55","messageId":"56","endLine":79,"endColumn":142},"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock"]